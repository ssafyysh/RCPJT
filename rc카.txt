구현된 기능
  - 얼굴인식
    - 등록된 얼굴을 인식하면 자동차 조종이 가능함
  - 스마트폰 조종기
    - 안드로이드 스튜디오로 조종 UI를 개발, 서버 통신으로 명령을 내려 조종 가능
  - 안전거리 유지 시스템
    - 초음파 센서를 이용, 전/후방에 존재하는 장애물에 50cm 이하로 접근하지 않도록 속도 조절 및 정지

보조 기능
  - LED
    - 움직일 수 없는 상태(lock)를 빨간 LED로 표시하며, 등록된 얼굴이 인식되면 조종 가능한 상태(unlock)로 변하고 초록 LED로 표시
  - 얼굴 인식을 위한 얼굴 학습
    - 라즈베리파이의 파이카메라와 OpenCV의 얼굴 학습 코드를 이용하여, 얼굴을 등록하고 학습시킴
  - DB(MySQL)
    - command table, drive table이 존재한다
    - 앱에서는 command table에 현재 시간, 요청할 명령어를 전송
    - RC카에서는 command table에서 가장 최신에 등록된 명령어를 읽고, 해당 명령어에 맞는 동작을 수행
    - RC카에는 등록된 얼굴 정보가 존재하며, 등록된 얼굴이 인식될 경우 driver table에 해당 driver 이름과 시동을 걸었던 시간을 전송

필요한 개선점
  - 얼굴 인식률
    - OpenCV의 얼굴 등록 및 학습 코드를 이용하였지만, 안경을 쓰고 있을 경우 얼굴 인식률이 떨어진다. 얼굴 인식률을 높이는 방법을 찾거나, 인터넷에서 제공되는 얼굴 인식 관련 인공지능 머신러닝(텐서플로우, 파이토치)을 활용하여 더욱 정밀한 얼굴 인식을 구현할 수 있으면 좋을 듯하다.
  - 거리 측정 정밀도
    - 프로젝트에 사용한 초음파센서(HC SR04)는 초음파 발신부, 수신부가 있다. 초음파 발신부에서 초음파가 발사되면 장애물에 부딪힌 다음 수신부에 들어가며, 이 시간을 계산하여 거리로 출력한다. 문제는 경우에 따라 거리 값이 튀는 경우가 있으며, 추정되는 원인으로 케이블 불량, 불안정한 전원 공급 등이 있지만 확실하지 않다.
  - 어플리케이션 멀티 터치
    - 어플 조종으로 처음 의도한 것은 전진과 후진, 좌회전과 우회전 명령이 매끄럽게 이루어지는 것이었다. 그런데 멀티 터치 구현이 어려워 전진 명령을 내리고 좌회전 명령을 내리려면 전진 영역의 터치를 떼어야 한다. 전진과 후진은 터치하지 않으면 브레이크가 되도록 구조를 맞췄기 때문에 방향 변경과 움직임을 동시에 처리할 수 없었다. 그래서 따로 브레이크를 담당할 터치 버튼을 만들어 구현했다. 스마트폰에서 게임을 하듯이 구현한다면 유저 체험이 더 재밌을 듯하다.
  - 카메라 스트리밍
    - 얼굴 인식에 성공한 후, 전방 상황을 스트리밍하여 서버에 올리고 앱으로 전송하는 방법을 생각했다. 라즈베리파이 내에서 영상은 정상적으로 재생되었으나, 실시간으로 영상을 저장하여 서버에 올릴 때 전송 속도가 매우 느렸다. 디버깅을 해보니 영상이 1초에 한 번 올라가는 속도였으며, 이는 RC카 프로그램을 실행시키는 것도, 저장된 이미지를 실시간으로 불러오는 것도 어려워 보였다. 파이썬에서 실시간으로 촬영된 이미지를 시스템 명령어를 이용하여 AWS DB에 직접 전송하였는데, 이보다 더 빠르게 이미지를 전송하는 방법이 있는지, 아니면 다른 방법으로 이미지를 전송하고 수신받아야 하는지 알아볼 필요가 있지만 기타 기능을 구현하기 위해 인터넷을 통한 카메라 영상 스트리밍은 보류하였다.